import argparse
import asyncio
import csv
from datetime import datetime
from dateutil.parser import isoparse
from pyiqvia import Client
import pandas as pd
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument('zipcode', help="current zipcode for data")
parser.add_argument('-s', '--start_date', default=None, help="earliest date to record")
parser.add_argument('-l', '--latest_date', default=None, help="exclusive latest date to record")
parser.add_argument('--allergy_csv', type=Path, default=Path(__file__).absolute().parent / "allergy_index.csv")
parser.add_argument('--asthma_csv', type=Path, default=Path(__file__).absolute().parent / "asthma_index.csv")
parser.add_argument('--disease_csv', type=Path, default=Path(__file__).absolute().parent / "disease_index.csv")

# Utils
def remove_keys(removable_keys, d) = d |> filter$(k -> k not in removable_keys) |> keys -> {k: d[k] for k in keys}

# Script
async def historic(client: Client) -> tuple:
    allergies = await client.allergens.historic()
    asthma = await client.asthma.historic()
    disease = await client.disease.historic()

    return (allergies, asthma, disease)

def parse_date_range(str_daterange):
    start, latest = str_daterange
    start_datetime = start |> date -> isoparse(date ?? '0001-01-01')  # default to first day of CE
    latest_datetime = latest |> date -> isoparse(date ?? datetime.today() |> str)

    return start_datetime, latest_datetime

def extract_data(request_results, date_range) -> pd.DataFrame:
    """
    Allergy Schema:
    {
        'ForecastDate': '2020-08-08T00:00:00-04:00',
        'Location': {
            'City': 'GUALALA',
            'DisplayLocation': 'Gualala, CA',
            'State': 'CA',
            'ZIP': '95445',
            'periods': [{'Index': 3.9, 'Period': '2020-07-10T05:30:33'}, ...]
        },
        'Type': 'pollen'
    }
    
    Asthma Schema:
    {
        'ForecastDate': '2020-09-03T00:00:00-04:00',
        'Location': {
            'City': 'GUALALA',
            'DisplayLocation': 'Gualala, CA',
            'State': 'CA',
            'ZIP': '95445',
            'periods': [{
                'Idx': '2.6',
                'Index': 2.6,
                'Period': '2020-08-05T05:45:01.113'}, ... ]
            },
        'Type': 'asthma'
    }

    Disease Schema:
    {
        'ForecastDate': '2020-09-03T00:00:00-04:00',
        'Location': {
            'City': 'GUALALA',
            'DisplayLocation': 'Gualala, CA',
            'State': 'CA',
            'ZIP': '95445',
            'periods': [{
                'Description': 'Low levels of respiratory illness '
                                          'may affect a very small percentage '
                                          'of the population.',
                'Idx': '1.8',
                'Index': 1.8,
                'Level': 'Low',
                'LevelColor': '#c7effc',
                'Period': '2020-08-06T00:00:00'}, ... ]
            },
        'Type': 'cold'
    }

    date_range is exclusive on right end
    """
    data_type = request_results['Type']
    location, zipcode = request_results['Location']['DisplayLocation'], request_results['Location']['ZIP']
    periods = request_results['Location']['periods']
    start_datetime, latest_datetime = date_range

    request_data = (periods
     |> filter$(row -> latest_datetime > isoparse(row['Period']) >= start_datetime)
     |> sorted$(key=row -> row['Period'])
     |> map$(row -> {**remove_keys(['Idx', 'LevelColor'], row), 'Location': location, 'Zipcode': zipcode, 'Type': data_type}))

    return pd.DataFrame(request_data).set_index(['Period', 'Type'])

def join_csv(new_df: pd.DataFrame, csv_file: Path) -> pd.DataFrame:
    old_df = pd.read_csv(csv_file).set_index(['Period', 'Type'])

    return pd.concat([old_df[~old_df.index.isin(new_df.index)], new_df]).sort_index()


def df_to_csv(df: pd.DataFrame, csv_file: Path) -> None:
    def out_df(csv_file if not csv_file.is_file()) = df
    addpattern def out_df(csv_file if csv_file.is_file()):
        "Merging new data with existing data for " + str(csv_file) |> print
        return join_csv(df, csv_file)
    
    out_df(csv_file).to_csv(csv_file)
    

if __name__ == "__main__":
    args = parser.parse_args()
    client = Client(args.zipcode)
    allergies, asthma, disease = asyncio.run(historic(client))
    date_range = (args.start_date, args.latest_date) |> parse_date_range

    allergies |> extract_data$(date_range=date_range) |> df_to_csv$(csv_file=args.allergy_csv)
    asthma |> extract_data$(date_range=date_range) |> df_to_csv$(csv_file=args.asthma_csv)
    disease |> extract_data$(date_range=date_range) |> df_to_csv$(csv_file=args.disease_csv)

    
