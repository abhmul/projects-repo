#!/opt/anaconda3/envs/main/bin/coconut-run
import argparse
import asyncio
import csv
from datetime import datetime
from pyiqvia import Client


parser = argparse.ArgumentParser()
parser.add_argument('zipcode', help="current zipcode for data")
parser.add_argument('-s', '--start_date', default=None, help="earliest date to record")
parser.add_argument('-l', '--latest_date', default=None, help="inclusive latest date to record")


async def historic(client: Client) -> tuple:
    allergies = await client.allergens.historic()
    asthma = await client.asthma.historic()
    disease = await client.disease.historic()
    return (allergies, asthma, disease)

def parse_date_range(start=None, latest=None):
    start_datetime = start |> datetime.fromisoformat(_ ?? '0001-01-01')  # default to first day of CE
    latest_datetime = latest |> datetime.fromisoformat(_ ?? datetime.today() |> str)
    return start_datetime, latest_datetime

def allergies_to_csv(allergy_results, date_range):
    """
    Schema:
    {
        'ForecastDate': '2020-08-08T00:00:00-04:00',
        'Location': {
            'City': 'GUALALA',
            'DisplayLocation': 'Gualala, CA',
            'State': 'CA',
            'ZIP': '95445',
            'periods': [{'Index': 3.9, 'Period': '2020-07-10T05:30:33'}, ...]
        },
        'Type': 'pollen'
    }

    date_range is inclusive
    """
    periods = allergy['Location']['periods']


if __name__ == "__main__":
    args = parser.parse_args()
    client = Client(args.zipcode)
    allergies, asthma, disease = historic(client)
